<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[基于GitPages和Jekyll搭建博客]]></title>
      <url>%2F2017%2F01%2F14%2F%E5%9F%BA%E4%BA%8EGitPages%E5%92%8CJekyll%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[搭建Jekyll环境Jekyll，它是一款静态页面生成器，简单的理解就是能够把我们编写的Markdown文件转换为html文件以便在网页上更优雅的浏览。 集成Ruby我用的Win10，官网推荐的使用RubyInstall进行安装，来到https://rubyinstaller.org/进行下载，官网推荐的是下载2.x版本的，我下载的是2.2.6,安装过程记得把多选框的第二个选上，不然又会比较麻烦。 安装完毕打开命令行执行ruby -v出现 即安装成功。 安装Jekyll使用gem工具安装jekyll，这是一个十分漫长的过程，不知道翻墙会不会快点 1gem install jekyll 然后安装jekyll-paginate 1gem install jekyll-paginate 本地调试主题下载接下来去JekyllTheme挑选一个喜欢的主题下载之后解压到任意一个目录， 下面是目录结构 在此目录下执行jekyll serve，可能会报错，是因为中文编码的问题 解决办法是在ruby安装目录下找到sass.rb的文件，如D:\Ruby22-x64\lib\ruby\gems\2.2.0\gems\sass-3.4.23\lib\sass.rb，找到module Sass,在下一行添加Encoding.default_external = Encoding.find(&#39;utf-8&#39;)即可解决 12module SassEncoding.default_external = Encoding.find('utf-8') 然后在地址栏127.0.0.1:4000，即可预览效果。 你的第一篇博客上面的预览效果是别人模板自带的文章，接下来我们自己写一篇文章看看，为简洁起见，直接在本地的_posts文件夹下 ，模仿上面的文件新建一个文件2017-01-12-my-first-post.markdon，记得命名格式要和第一个文件一致，不然无法识别 接下来回到上级目录，打开命令行，输入jekyll serve，地址栏键入127.0.0.1进行预览 怎么样，效果还是不错的，一个本地的博客已经搭建完成，那么怎样把博客内容放到GitPage上呢？ 同步到GitHub博客终究是拿来给人看的，是用来分享的，所以你要是拿来当笔记本，这篇文章看到以上部分就可以了，我们的文章只有能让别人访问到才能算的上是博客吧！ 注册你的GitHub账号来到GitHub官网进行注册，https://github.com，点击Sign Up开始注册 来到注册页，这是注册的第一步step one，用户名和邮箱以后很多地方会用到，所以一定要确保自己能够记得住，还有GitHub注册这里没有重复密码确认，所以输入密码的时候要小心咯，然后点击下面的Create an account创建用户，然后来到第二步。 在第二步中，选择你的计划，开源仓库是免费的，你要是有的代码不想公开也可以选择下面的私人仓库，价格是7美元一个月，之后点击Continue进行Step 3 第三步中直接下拉到红色箭头吧（无聊的话你是可以填一填上面的调查问卷），skip this step 创建博客仓库然后来到时间线，开始创建仓库吧！！ 来到仓库创建界面，会让你验证邮箱，验证完就可以创建了 ，这里的仓库名必须是 用户名+.github.io，因为他会根据你的仓库名字去寻找你的GitHubPages，点击创建即可完成创建工作。 这个仓库创建完毕，你在地址栏键入https://youruername.github.io/ 就可以看到效果 。 安装GitGit是一个能够把本地代码提交到GitHub的工具，来到它的下载站点https://git-scm.com/downloads进行下载，一路下一步即可，安装完成后你在任意目录下右键会发现多了两个item,Git Bash和Git GUI。 配置Git任意一个目录下右键Git Bash 12$ git config --global user.name "yourname"$ git config --global user.email "yourname@example.com" 克隆博客仓库到本地将远程仓库克隆到本地作为你的博客目录，在你的主题的根目录右键Git Bash，然后输入Git Clone https://github.com/youruername/youruername.github.io.git，等待片刻进入此目录，删除除了.git文件夹的其他文件，下面是动图。 .git表示同目录下的所有文件和文件夹已经进入版本控制，也就是可以通过Git提交到GitHub，_site就是你的站点根目录，将.git剪切到site目录下 提交到远程仓库123git add --all #添加到暂存区 git commit -m &quot;提交jekyll默认页面&quot; #提交到本地仓库git push origin master #线上的站点是部署在master下面的 可能提示你输入用户名和密码，就是你注册GitHub的账号密码。 以上三个步骤完毕后你的GitHUb工程目录应该是下面这个样子 没有出错的话，在地址栏敲入yourname.github.io即可看到博客已经部署上去，下面是最终效果图。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[SSH远程登录方法和原理]]></title>
      <url>%2F2017%2F01%2F03%2FSSH%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95Linux%E4%B8%BB%E6%9C%BA%E6%96%B9%E6%B3%95%E5%92%8C%E5%8E%9F%E7%90%86%2F</url>
      <content type="text"><![CDATA[SSH远程登录Linux主机方法和原理概述 SSH是一种网络协议，用于计算机之间的加密登录，当我们使用ssh username@xxx.com的时候，内部到底发生什么了呢？为什么ssh登录是安全的呢？ 登录方式（Shell环境下） 登录方式分为两种，一种是密码登录，一种是公钥登录，下面就来介绍两种方式的区别。 密码登录假设你是第一次登录远程主机，使用$ ssh ubuntu@xxx.com登录1$ ssh ubuntu@xxx.com 接下来会提示：12The authenticity of host &apos;github.com (192.30.253.112)&apos; can&apos;t be established .RSAkey fingerprint is SHA256 : nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.Are you sure you want to continue connecting (yes/no)? 这个时候千万别心急直接yes，这里存在着安全风险，下面会说到，我们先看上面那一段的意思是大概是该主机的真实性不能保证,只知道它的公钥的指纹是nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8当我们敲下yes的时候提示：12Warning: Permanently added &apos;github.com,192.30.253.112&apos; (RSA) to the list of known hosts.packet_write_wait: Connection to 192.30.253.112: Broken pipe 意思是该主机已经被添加到信任列表，下次连接该主机的时候，不会再有Warn提示。 当我们再次ssh ubuntu@xxx.com时，这个时候有两种情况，一种是如下提示12$ ssh ubuntu@xxx.comPermission Denied(publickey). 这种情况是远程主机没有开启密码登录功能，开启方式：进入/etc/ssh目录，编辑sshd_config文件，设置此选项1PasswordAuthentication yes 即允许密码登录，记住修改主机ssh配置，需要重启ssh服务1service restart ssh 当我们再次ssh ubuntu@xxx.com时。终于看见输入密码的提示了1ubuntu@xxx.com&apos;s password: 当我们输入正确的密码时就可以登录到主机上了。 但是上面这种方式有一种隐藏的安全问题，那就是中间人攻击。 中间人攻击 当我们敲下ssh ubuntu@xxx.com的时候，即正在向远程主机发出请求连接，此时潜伏着的中间人可能截获这个请求，并把它的公钥发回来，我们误以为这是我们要登录的主机的公钥，将密码发送过去后，中间人就可以用私钥解密，顺利拿到远程主机的密码，然后……然后就GG了。这就是上面说到的为什么不能急着yes，因为我们无法确定这个公钥就是我们要登录的远程主机的公钥，我们可以将此公钥与远程主机的公钥做一个对比，相同的话在确认。比如一下就是GitHub的公开公钥指纹https://help.github.com/articles/what-are-github-s-ssh-key-fingerprints/ 公钥登录生成密钥对这是一种更为安全的登录方式，但是操作起来略复杂些，需要我们在本地生成一对儿密钥对，具体的操作:123$ ssh-keygenGeberating public/private rsa key pair.Enter file in which to save the key (/home/ubuntu/.ssh/id_rsa): 我们回车就行，默认存储在/home/ubuntu/.ssh/id_rsa目录下，这个时候提示：1Enter passphrase (empty for no passphrase): 让你输入私钥的密码，回车就可以，但为安全起见最好输入一个密码。完成就在本地生成了密钥对。 上传公钥接下来我们就要将公钥发送给服务器，这个过程需要你输入密码1scp ~/.ssh/id_rsa.pub ubuntu@xxx.com:~ 输入密码后，公钥就被发送到服务器，但是还没完，我们还要将公钥添加到authorized_keys中，才能让服务器识别出本地的主机.12cd /home/ubuntucat id_rsa.pub &gt;&gt; .ssh/authorized_keys OK，该主机的公钥已经被服务器识别，当你再次$ ssh ubuntu@xxx.com时，你会得到：1sign_and_send_pubkey: signing failed: agent refused operation 但是中间有个机构叫做ssh-agent，它不识别你本地的私钥，因此要让它识别我们还要添加代理识别。1ssh-add //注意，这是在你本地执行 OK，完成以上操作，基本收工。。。。 总结因为公钥加密比密码直接登录更安全，所以一般的服务器都会默认将PasswordAuthentication设置为no，即不允许密码登录。但是当你开启密码登录时，默认会先采用公钥登录，公钥登录不成功还是会采取密码登录。ps：本地密钥丢失也会直接采用密码登录。下面比较这两种登录方式的差异。 密码登录 公钥登录 含义 本地主机用远程主机的公钥对密码加密，远程主机私钥解密 远程主机随机发送字符串到客户端，客户端用私钥加密，发送回远程主机，远程主机用公钥解密 安全性 低，容易受到中间人攻击 高，但是要确保本地秘钥的安全性]]></content>
    </entry>

    
  
  
</search>
