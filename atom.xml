<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>aiyouweiya&#39;s blog</title>
  <subtitle>A Man Walking On The Cable</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://aiyouweiya.github.io/"/>
  <updated>2017-02-11T11:54:21.853Z</updated>
  <id>https://aiyouweiya.github.io/</id>
  
  <author>
    <name>aiyouweiya</name>
    <email>aiyouweiya1996@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于GitPages和Jekyll搭建博客</title>
    <link href="https://aiyouweiya.github.io/2017/01/14/%E5%9F%BA%E4%BA%8EGitPages%E5%92%8CJekyll%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://aiyouweiya.github.io/2017/01/14/基于GitPages和Jekyll搭建博客/</id>
    <published>2017-01-13T16:00:00.000Z</published>
    <updated>2017-02-11T11:54:21.853Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建Jekyll环境"><a href="#搭建Jekyll环境" class="headerlink" title="搭建Jekyll环境"></a>搭建Jekyll环境</h2><p><code>Jekyll</code>，它是一款静态页面生成器，简单的理解就是能够把我们编写的<code>Markdown</code>文件转换为html文件以便在网页上更优雅的浏览。<br><a id="more"></a></p>
<h3 id="集成Ruby"><a href="#集成Ruby" class="headerlink" title="集成Ruby"></a>集成Ruby</h3><p>我用的Win10，官网推荐的使用RubyInstall进行安装，来到<a href="https://rubyinstaller.org/" target="_blank" rel="external">https://rubyinstaller.org/</a><br>进行下载，官网推荐的是下载2.x版本的，我下载的是2.2.6,安装过程记得把多选框的第二个选上，不然又会比较麻烦。</p>
<p> <img src="/img/ruby2.jpg" alt="ruby2"></p>
<p>安装完毕打开命令行执行<code>ruby -v</code>出现 <img src="/img/ruby3.jpg" alt="ruby3">即安装成功。</p>
<h3 id="安装Jekyll"><a href="#安装Jekyll" class="headerlink" title="安装Jekyll"></a>安装Jekyll</h3><p>使用gem工具安装jekyll，这是一个十分漫长的过程，不知道翻墙会不会快点</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install jekyll</div></pre></td></tr></table></figure>
<p>然后安装jekyll-paginate</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install jekyll-paginate</div></pre></td></tr></table></figure>
<h2 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h2><h3 id="主题下载"><a href="#主题下载" class="headerlink" title="主题下载"></a>主题下载</h3><p>接下来去<a href="http://jekyllthemes.org/" target="_blank" rel="external">JekyllTheme</a>挑选一个喜欢的主题下载之后解压到任意一个目录， 下面是目录结构<img src="/img/theme.jpg" alt="theme"></p>
<p>在此目录下执行<code>jekyll serve</code>，可能会报错，是因为中文编码的问题<img src="/img/theme2.jpg" alt="theme2"></p>
<p>解决办法是在ruby安装目录下找到sass.rb的文件，如D:\Ruby22-x64\lib\ruby\gems\2.2.0\gems\sass-3.4.23\lib\sass.rb，找到module Sass,在下一行添加<code>Encoding.default_external = Encoding.find(&#39;utf-8&#39;)</code>即可解决</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">module</span> <span class="title">Sass</span></span></div><div class="line">Encoding.default_external = Encoding.find(<span class="string">'utf-8'</span>)</div></pre></td></tr></table></figure>
<p>然后在地址栏<code>127.0.0.1:4000</code>，即可预览效果。</p>
<h3 id="你的第一篇博客"><a href="#你的第一篇博客" class="headerlink" title="你的第一篇博客"></a>你的第一篇博客</h3><p>上面的预览效果是别人模板自带的文章，接下来我们自己写一篇文章看看，为简洁起见，直接在本地的<code>_posts</code>文件夹下 ，模仿上面的文件新建一个文件<code>2017-01-12-my-first-post.markdon</code>，记得命名格式要和第一个文件一致，不然无法识别<img src="/img/write.jpg" alt="write"></p>
<p>接下来回到上级目录，打开命令行，输入<code>jekyll serve</code>，地址栏键入<code>127.0.0.1</code>进行预览</p>
<p><img src="/img/write2.jpg" alt="write2"></p>
<p>怎么样，效果还是不错的，一个本地的博客已经搭建完成，那么怎样把博客内容放到GitPage上呢？</p>
<h2 id="同步到GitHub"><a href="#同步到GitHub" class="headerlink" title="同步到GitHub"></a>同步到GitHub</h2><p>博客终究是拿来给人看的，是用来分享的，所以你要是拿来当笔记本，这篇文章看到以上部分就可以了，我们的文章只有能让别人访问到才能算的上是博客吧！</p>
<h3 id="注册你的GitHub账号"><a href="#注册你的GitHub账号" class="headerlink" title="注册你的GitHub账号"></a>注册你的GitHub账号</h3><p>来到GitHub官网进行注册，<a href="https://github.com，点击Sign" target="_blank" rel="external">https://github.com，点击Sign</a> Up开始注册</p>
<p><img src="/img/GitHub.jpg" alt="GitHub"></p>
<p>来到注册页，这是注册的第一步step one，用户名和邮箱以后很多地方会用到，所以一定要确保自己能够记得住，还有GitHub注册这里没有重复密码确认，所以输入密码的时候要小心咯，然后点击下面的Create an account创建用户，然后来到第二步。</p>
<p> <img src="/img/sign_up_step1.jpg" alt="sign_up_step1"></p>
<p>在第二步中，选择你的计划，开源仓库是免费的，你要是有的代码不想公开也可以选择下面的私人仓库，价格是7美元一个月，之后点击Continue进行Step 3</p>
<p><img src="/img/sign_up_step2.jpg" alt="sign_up_step2"></p>
<p>第三步中直接下拉到红色箭头吧（无聊的话你是可以填一填上面的调查问卷），skip this step</p>
<p><img src="/img/sign_up_step3.jpg" alt="sign_up_step3"></p>
<h3 id="创建博客仓库"><a href="#创建博客仓库" class="headerlink" title="创建博客仓库"></a>创建博客仓库</h3><p>然后来到时间线，开始创建仓库吧！！</p>
<p><img src="/img/create_repo.jpg" alt="create_repo"></p>
<p>来到仓库创建界面，会让你验证邮箱，验证完就可以创建了 ，这里的仓库名必须是 <code>用户名+.github.io</code>，因为他会根据你的仓库名字去寻找你的GitHubPages，点击创建即可完成创建工作。</p>
<p><img src="/img/create_repo2.jpg" alt="create_repo2"></p>
<p>这个仓库创建完毕，你在地址栏键入<a href="https://youruername.github.io/" target="_blank" rel="external">https://youruername.github.io/</a> 就可以看到效果 。<img src="/img/git_page1.jpg" alt="git_page1"></p>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>Git是一个能够把本地代码提交到GitHub的工具，来到它的下载站点<a href="https://git-scm.com/downloads" target="_blank" rel="external">https://git-scm.com/downloads</a><br>进行下载，一路下一步即可，安装完成后你在任意目录下右键会发现多了两个item,<code>Git Bash</code>和<code>Git GUI</code>。</p>
<h3 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h3><p>任意一个目录下右键<code>Git Bash</code></p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name "yourname"</div><div class="line">$ git config --global user.email "yourname@example.com"</div></pre></td></tr></table></figure>
<h3 id="克隆博客仓库到本地"><a href="#克隆博客仓库到本地" class="headerlink" title="克隆博客仓库到本地"></a>克隆博客仓库到本地</h3><p>将远程仓库克隆到本地作为你的博客目录，在你的主题的根目录右键<code>Git Bash</code>，然后输入<code>Git Clone https://github.com/youruername/youruername.github.io.git</code>，等待片刻进入此目录，删除除了<code>.git</code>文件夹的其他文件，下面是动图。</p>
<p><img src="/img/clone.gif" alt="clone"></p>
<p>.<code>git</code>表示同目录下的所有文件和文件夹已经进入版本控制，也就是可以通过Git提交到GitHub，_site就是你的站点根目录，将.git剪切到site目录下</p>
<p><img src="/img/write3.jpg" alt="write3"></p>
<h3 id="提交到远程仓库"><a href="#提交到远程仓库" class="headerlink" title="提交到远程仓库"></a>提交到远程仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add --all			   #添加到暂存区	</div><div class="line">git commit -m &quot;提交jekyll默认页面&quot; #提交到本地仓库</div><div class="line">git push origin master    	   #线上的站点是部署在master下面的</div></pre></td></tr></table></figure>
<p>可能提示你输入用户名和密码，就是你注册GitHub的账号密码。</p>
<p>以上三个步骤完毕后你的GitHUb工程目录应该是下面这个样子</p>
<p><img src="/img/write4.jpg" alt="write4"></p>
<p>没有出错的话，在地址栏敲入<code>yourname.github.io</code>即可看到博客已经部署上去，下面是最终效果图。</p>
<p><img src="/img/final.jpg" alt="final"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;搭建Jekyll环境&quot;&gt;&lt;a href=&quot;#搭建Jekyll环境&quot; class=&quot;headerlink&quot; title=&quot;搭建Jekyll环境&quot;&gt;&lt;/a&gt;搭建Jekyll环境&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Jekyll&lt;/code&gt;，它是一款静态页面生成器，简单的理解就是能够把我们编写的&lt;code&gt;Markdown&lt;/code&gt;文件转换为html文件以便在网页上更优雅的浏览。&lt;br&gt;
    
    </summary>
    
    
      <category term="Jekyll" scheme="https://aiyouweiya.github.io/tags/Jekyll/"/>
    
  </entry>
  
  <entry>
    <title>SSH远程登录方法和原理</title>
    <link href="https://aiyouweiya.github.io/2017/01/03/SSH%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95Linux%E4%B8%BB%E6%9C%BA%E6%96%B9%E6%B3%95%E5%92%8C%E5%8E%9F%E7%90%86/"/>
    <id>https://aiyouweiya.github.io/2017/01/03/SSH远程登录Linux主机方法和原理/</id>
    <published>2017-01-02T16:00:00.000Z</published>
    <updated>2017-02-11T11:53:38.770Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSH远程登录Linux主机方法和原理"><a href="#SSH远程登录Linux主机方法和原理" class="headerlink" title="SSH远程登录Linux主机方法和原理"></a>SSH远程登录Linux主机方法和原理</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>SSH是一种网络协议，用于计算机之间的加密登录，当我们使用<code>ssh username@xxx.com</code>的时候，内部到底发生什么了呢？为什么ssh登录是安全的呢？</p>
</blockquote>
<a id="more"></a>
<h2 id="登录方式（Shell环境下）"><a href="#登录方式（Shell环境下）" class="headerlink" title="登录方式（Shell环境下）"></a>登录方式（Shell环境下）</h2><blockquote>
<p>登录方式分为两种，一种是<code>密码登录</code>，一种是<code>公钥登录</code>，下面就来介绍两种方式的区别。</p>
</blockquote>
<h3 id="密码登录"><a href="#密码登录" class="headerlink" title="密码登录"></a>密码登录</h3><p>假设你是第一次登录远程主机，使用<code>$ ssh ubuntu@xxx.com</code>登录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh ubuntu@xxx.com</div></pre></td></tr></table></figure></p>
<p>接下来会提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">The authenticity of host &apos;github.com (192.30.253.112)&apos; can&apos;t be established .RSAkey fingerprint is SHA256 : nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</div><div class="line">Are you sure you want to continue connecting (yes/no)?</div></pre></td></tr></table></figure></p>
<p>这个时候千万别心急直接<code>yes</code>，这里存在着安全风险，下面会说到，我们先看上面那一段的意思是大概是该主机的真实性不能保证,只知道它的公钥的指纹是<code>nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8</code><br>当我们敲下<code>yes</code>的时候提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Warning: Permanently added &apos;github.com,192.30.253.112&apos; (RSA) to the list of known hosts.</div><div class="line">packet_write_wait: Connection to 192.30.253.112: Broken pipe</div></pre></td></tr></table></figure></p>
<p>意思是该主机已经被添加到信任列表，下次连接该主机的时候，不会再有<strong>Warn</strong>提示。</p>
<p>当我们再次<code>ssh ubuntu@xxx.com</code>时，这个时候有两种情况，一种是如下提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ ssh ubuntu@xxx.com</div><div class="line">Permission Denied(publickey).</div></pre></td></tr></table></figure></p>
<p>这种情况是远程主机没有开启密码登录功能，开启方式：进入<strong>/etc/ssh</strong>目录，编辑<strong>sshd_config</strong>文件，设置此选项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">PasswordAuthentication yes</div></pre></td></tr></table></figure></p>
<p>即允许密码登录，记住修改主机ssh配置，需要重启ssh服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service restart ssh</div></pre></td></tr></table></figure></p>
<p>当我们再次<code>ssh ubuntu@xxx.com</code>时。终于看见输入密码的提示了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ubuntu@xxx.com&apos;s password:</div></pre></td></tr></table></figure></p>
<p>当我们输入正确的密码时就可以登录到主机上了。</p>
<p>但是上面这种方式有一种隐藏的安全问题，那就是中间人攻击。</p>
<h4 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h4><blockquote>
<p>当我们敲下<code>ssh ubuntu@xxx.com</code>的时候，即正在向远程主机发出请求连接，此时潜伏着的中间人可能截获这个请求，并把它的公钥发回来，我们误以为这是我们要登录的主机的公钥，将密码发送过去后，中间人就可以用私钥解密，顺利拿到远程主机的密码，然后……然后就GG了。这就是上面说到的为什么不能急着<code>yes</code>，因为我们无法确定这个公钥就是我们要登录的远程主机的公钥，我们可以将此公钥与远程主机的公钥做一个对比，相同的话在确认。比如一下就是GitHub的公开公钥指纹<br><a href="https://help.github.com/articles/what-are-github-s-ssh-key-fingerprints/" target="_blank" rel="external">https://help.github.com/articles/what-are-github-s-ssh-key-fingerprints/</a></p>
</blockquote>
<h3 id="公钥登录"><a href="#公钥登录" class="headerlink" title="公钥登录"></a>公钥登录</h3><h4 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h4><p>这是一种更为安全的登录方式，但是操作起来略复杂些，需要我们在本地生成一对儿密钥对，具体的操作:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen</div><div class="line">Geberating public/private rsa key pair.</div><div class="line">Enter file in which to save the key (/home/ubuntu/.ssh/id_rsa):</div></pre></td></tr></table></figure></p>
<p>我们回车就行，默认存储在<code>/home/ubuntu/.ssh/id_rsa</code>目录下，这个时候提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Enter passphrase (empty for no passphrase):</div></pre></td></tr></table></figure></p>
<p>让你输入私钥的密码，回车就可以，但为安全起见最好输入一个密码。完成就在本地生成了密钥对。</p>
<h4 id="上传公钥"><a href="#上传公钥" class="headerlink" title="上传公钥"></a>上传公钥</h4><p>接下来我们就要将公钥发送给服务器，这个过程需要你输入密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp ~/.ssh/id_rsa.pub ubuntu@xxx.com:~</div></pre></td></tr></table></figure></p>
<p>输入密码后，公钥就被发送到服务器，但是还没完，我们还要将公钥添加到<code>authorized_keys</code>中，才能让服务器识别出本地的主机.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /home/ubuntu</div><div class="line">cat id_rsa.pub &gt;&gt; .ssh/authorized_keys</div></pre></td></tr></table></figure></p>
<p>OK，该主机的公钥已经被服务器识别，当你再次<code>$ ssh ubuntu@xxx.com</code>时，你会得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sign_and_send_pubkey: signing failed: agent refused operation</div></pre></td></tr></table></figure></p>
<p>但是中间有个机构叫做<code>ssh-agent</code>，它不识别你本地的私钥，因此要让它识别我们还要添加代理识别。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-add //注意，这是在你本地执行</div></pre></td></tr></table></figure></p>
<p>OK，完成以上操作，基本收工。。。。 </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>因为公钥加密比密码直接登录更安全，所以一般的服务器都会默认将<code>PasswordAuthentication</code>设置为<code>no</code>，即不允许密码登录。但是当你开启密码登录时，默认会先采用公钥登录，公钥登录不成功还是会采取密码登录。ps：本地密钥丢失也会直接采用密码登录。下面比较这两种登录方式的差异。</p>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center">密码登录</th>
<th style="text-align:center">公钥登录</th>
</tr>
</thead>
<tbody>
<tr>
<td>含义</td>
<td style="text-align:center">本地主机用远程主机的公钥对密码加密，远程主机私钥解密</td>
<td style="text-align:center">远程主机随机发送字符串到客户端，客户端用私钥加密，发送回远程主机，远程主机用公钥解密</td>
</tr>
<tr>
<td>安全性</td>
<td style="text-align:center">低，容易受到中间人攻击</td>
<td style="text-align:center">高，但是要确保本地秘钥的安全性</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SSH远程登录Linux主机方法和原理&quot;&gt;&lt;a href=&quot;#SSH远程登录Linux主机方法和原理&quot; class=&quot;headerlink&quot; title=&quot;SSH远程登录Linux主机方法和原理&quot;&gt;&lt;/a&gt;SSH远程登录Linux主机方法和原理&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;SSH是一种网络协议，用于计算机之间的加密登录，当我们使用&lt;code&gt;ssh username@xxx.com&lt;/code&gt;的时候，内部到底发生什么了呢？为什么ssh登录是安全的呢？&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="ssh" scheme="https://aiyouweiya.github.io/tags/ssh/"/>
    
  </entry>
  
</feed>
