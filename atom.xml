<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>aiyouweiya&#39;s blog</title>
  <subtitle>A Man Walking On The Cable</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://aiyouweiya.github.io/"/>
  <updated>2017-02-15T12:43:10.545Z</updated>
  <id>https://aiyouweiya.github.io/</id>
  
  <author>
    <name>aiyouweiya</name>
    <email>aiyouweiya1996@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>开始Hexo搭建博客（一）</title>
    <link href="https://aiyouweiya.github.io/2017/02/15/%E5%BC%80%E5%A7%8BHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://aiyouweiya.github.io/2017/02/15/开始Hexo搭建博客（一）/</id>
    <published>2017-02-14T16:00:00.000Z</published>
    <updated>2017-02-15T12:43:10.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Hexo？"><a href="#什么是Hexo？" class="headerlink" title="什么是Hexo？"></a>什么是Hexo？</h2><p><code>Hexo</code> 是一个快速、简洁且高效的博客框架。<code>Hexo</code> 使用<code>Markdwon</code>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p style="text-align:right;">    —— <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="external">文档 | Hexo </a>  —— </p><p></p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><ul>
<li><code>有梯子</code>：<a href="https://git-scm.com/download/win" target="_blank" rel="external">https://git-scm.com/download/win</a> </li>
<li><code>无梯子:</code>  <a href="https://github.com/waylau/git-for-win" target="_blank" rel="external">https://github.com/waylau/git-for-win</a></li>
</ul>
<p>一路下一步安装，安装完成需要做一下简单的配置，在任意位置右键鼠标，你会发现条目中多出几个与<code>Git</code>相关的条目。其中<code>Git Bash Here</code>使用最为普遍，他提供一种类似<code>Linux Shell</code>的风格。</p>
<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p><code>Node.js</code>: <a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a></p>
<p>也是一路下一步安装，注意请勾选<strong>Add to PATH</strong>选项。</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>在任意位置右键，选择<code>Git Bash Here</code>，执行<code>$ npm install -g hexo-cli</code>进行安装，安装过程可能会比较慢，请耐心等待。</p>
<h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>安装<code>Hexo</code>完成后，选定一个目录作为你的博客根目录，然后在该目录下右键点击<code>Git Bash Here</code>，<code>Hexo</code>将会在指定文件夹中新建所需要的文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo init # 初始化工作目录</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>完成该操作后，你会发现指定目录的目录结构变成如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── _config.yml  # 网站的配置信息，您可以在此配置大部分的参数。</div><div class="line">├── package.json  # 应用程序的信息, 记录了程序的名称、版本、依赖等。</div><div class="line">├── scaffolds  # 模版文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。</div><div class="line">├── source   # 资源文件夹是存放用户资源的地方</div><div class="line">|   ├── _drafts</div><div class="line">|   └── _posts</div><div class="line">└── themes  # 主题文件夹。Hexo 会根据主题来生成静态页面。</div></pre></td></tr></table></figure>
<h3 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h3><p>打开<code>source\post</code>文件夹，里边有一篇测试文章<code>hello-world.md</code>，然后我们回到<code>Git Bash</code>执行<code>hexo generate</code>命令，完成后你会发现根目录下多出一个<code>public</code>的文件夹，里边就是根据<code>post</code>里面的文章生成的静态文件。</p>
<h3 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h3><p>执行如下命令，启动本地服务，进行文章预览调试。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server # 启动本地服务器</div></pre></td></tr></table></figure>
<p>浏览器输入<code>http://127.0.0.1:4000</code>就可以看到一下效果。（亲测，不要使用微软家的浏览器）。预览完毕后<code>Ctrl+C</code>关闭服务器。</p>
<p><img src="http://olb41wiaa.bkt.clouddn.com/yulan.jpg" alt="landscape效果预览"></p>
<h2 id="你的第一篇博客"><a href="#你的第一篇博客" class="headerlink" title="你的第一篇博客"></a>你的第一篇博客</h2><p>既然框架已经搭建好了，那我们现在就来开始创作自己的第一篇博客吧！！！</p>
<h3 id="选择编辑工具"><a href="#选择编辑工具" class="headerlink" title="选择编辑工具"></a>选择编辑工具</h3><p>那么首先我们应该选择一款心仪的编辑工具来编写博客了，下面是比较知名的几款编辑工具：</p>
<ul>
<li><p>在线编辑</p>
<p><code>MaHua：</code><a href="http://mahua.jser.me/" target="_blank" rel="external">http://mahua.jser.me/</a>) </p>
<p><code>简书：</code> <a href="http://www.jianshu.com/" target="_blank" rel="external">http://www.jianshu.com/</a> </p>
<p><code>Cmd Markdown 在线版</code> <a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">https://www.zybuluo.com/mdeditor</a>  </p>
</li>
<li><p>本地编辑</p>
<p><code>Typora:</code> <a href="https://typora.io/" target="_blank" rel="external">https://typora.io/</a> </p>
<p><code>Cmd Markdown 客户端</code> <a href="https://www.zybuluo.com/cmd/" target="_blank" rel="external">https://www.zybuluo.com/cmd/</a> </p>
<p><code>马克飞象:</code> <a href="https://pan.baidu.com/s/1sl7tx29#list/path=%2F" target="_blank" rel="external">https://pan.baidu.com/s/1sl7tx29#list/path=%2F</a>  （收费的）</p>
</li>
</ul>
<p>这几款编辑器都各有各的优缺点吧，有实用的，有耐看的，有<code>Geek</code>的，孰优孰略大家可以都尝试看看，我自己使用的是<code>Typora</code>。</p>
<h3 id="开始写作"><a href="#开始写作" class="headerlink" title="开始写作"></a>开始写作</h3><p>用编辑器打开<code>source\post\hello-world.md</code>，有可能你看不懂，这是用<code>Markdown</code>语法写的文章，不过现在不用懂语法，我们就模仿这个文件自己写一个出来试试看。</p>
<p>编辑你的博客内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: Hello,Hexo</div><div class="line">---</div><div class="line">Hello,Hexo !!!</div></pre></td></tr></table></figure>
<p>然后保存，记住要保存到<code>post</code>目录下，接下来就要开始生成静态页面了，回到刚刚的根目录，右键<code>Git Bash Here</code> 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean #清除缓存文件 (db.json) 和已生成的静态文件 (public)。</div><div class="line">hexo generate #生成静态文件</div><div class="line">hexo server #开启服务器</div></pre></td></tr></table></figure>
<p>浏览器输入<code>http://127.0.0.1:4000</code>就可以看到一下效果。（亲测，不要使用微软家的浏览器）。预览完毕后<code>Ctrl+C</code>关闭服务器。</p>
<h2 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h2><p>以上过程就是本地编辑、预览的全部过程了，接下来我们要将文章托管到<code>Github</code>上，以供其他人可以访问。</p>
<h3 id="注册Github账号"><a href="#注册Github账号" class="headerlink" title="注册Github账号"></a>注册Github账号</h3><p>在 <a href="https://github.com/" target="_blank" rel="external">https://github.com/</a> 注册你的账号，<code>用户名</code>和<code>邮箱</code>比较重要，想好了再填，其他的也没什么好说的，比较简单。</p>
<h3 id="创建代码仓库"><a href="#创建代码仓库" class="headerlink" title="创建代码仓库"></a>创建代码仓库</h3><p>第一次创建仓库时会要求你验证邮箱，去邮箱里面验证一下就好了。下面我们创建一个代码仓库作为博客的容器，仓库的名字必须是<code>yourusername.github.io</code>，创建完成后在浏览器敲入<code>yourusername.github.io</code>就可以看到效果，不过比较简陋，因为现在仓库还是空的。</p>
<h3 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;Your Name&quot; # 刚刚注册的用户名</div><div class="line">$ git config --global user.email &quot;email@example.com&quot; # 刚刚注册的邮箱</div></pre></td></tr></table></figure>
<h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;email@example.com&quot; # 生成密钥</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file in which to save the key (/c/Documents and Settings/Administrator/.ssh/id_rsa): # 在此目录下保存密钥</div><div class="line">Enter passphrase (empty for no passphrase): # 读取密钥的密码（非常重要，设置时要小心）</div><div class="line">Enter same passphrase again:</div><div class="line">Your identification has been saved in /c/Documents and Settings/Administrator/.ssh/id_rsa.</div><div class="line">Your public key has been saved in /c/Documents and Settings/Administrator/.ssh/id_rsa.pub.</div></pre></td></tr></table></figure>
<p>上述命令若执行成功，会在<code>c/Documents and Settings/Administrator/.ssh/</code>目录下生成两个文件<code>id_rsa</code>和<code>id_rsa.pub</code>，带<code>pub</code>的是公钥，另外一个是私钥。</p>
<h3 id="添加私钥到ssh-agent"><a href="#添加私钥到ssh-agent" class="headerlink" title="添加私钥到ssh-agent"></a>添加私钥到ssh-agent</h3><p>确保<code>ssh-agent</code>是可用的。<code>ssh-agent</code>是一种控制用来保存公钥身份验证所使用的私钥的程序，其实<code>ssh-agent</code>就是一个密钥管理器，运行<code>ssh-agent</code>以后，使用<code>ssh-add</code>将私钥交给<code>ssh-agent</code>保管，其他程序需要身份验证的时候可以将验证申请交给<code>ssh-agent</code>来完成整个认证过程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ eval &quot;$(ssh-agent -s)&quot;</div><div class="line">Agent pid 59566</div><div class="line">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure>
<h3 id="上传公钥"><a href="#上传公钥" class="headerlink" title="上传公钥"></a>上传公钥</h3><p>打开公钥，将里面的内容复制到剪切板，然后来到<code>Github</code>网站，点击你的头像，点击<code>Settings</code> ，点击 <code>SSH and GPG keys</code>，点击<code>New SSH Key</code>，粘贴剪切板内容。</p>
<h3 id="安装hexo-deployer-git插件"><a href="#安装hexo-deployer-git插件" class="headerlink" title="安装hexo-deployer-git插件"></a>安装hexo-deployer-git插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<h3 id="修改部署配置"><a href="#修改部署配置" class="headerlink" title="修改部署配置"></a>修改部署配置</h3><p>打开<code>_config.yml</code>，滑到最下面，修改以下内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Deployment</div><div class="line">## Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">  type:</div></pre></td></tr></table></figure>
<p>修改为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: yourusername.github.io</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
<h3 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h3><p>回到根目录下，执行以下命令开始部署。此过程需要输入私钥的密码。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<p>部署完毕，大概几十秒后在浏览器键入<code>yourusername.github.io</code>即可看到效果。以上就是写博客的大体步骤了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本片博客主要介绍了<code>Hexo</code>搭建博客的过程，包括<code>环境准备</code>，<code>搭建框架</code>，<code>创作博客</code>，<code>本地预览</code>，<code>部署到Github</code>，这样的几个步骤。</p>
<p>最后的最后这几个命令要牢记，因为这几个命令就是大体的流程了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo clean</div><div class="line">hexo generate</div><div class="line">hexo server</div><div class="line">hexo deploy</div></pre></td></tr></table></figure>
<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p><code>量子广告:</code> <a href="http://blog.ynxiu.com/2016/hexo-you-blog.html" target="_blank" rel="external">http://blog.ynxiu.com/2016/hexo-you-blog.html</a></p>
<p><code>西山雨:</code> <a href="https://segmentfault.com/a/1190000002645623" target="_blank" rel="external">https://segmentfault.com/a/1190000002645623</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是Hexo？&quot;&gt;&lt;a href=&quot;#什么是Hexo？&quot; class=&quot;headerlink&quot; title=&quot;什么是Hexo？&quot;&gt;&lt;/a&gt;什么是Hexo？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Hexo&lt;/code&gt; 是一个快速、简洁且高效的博客框架。&lt;code&gt;Hexo&lt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://aiyouweiya.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>用WinSCP远程连接Linux主机的小技巧</title>
    <link href="https://aiyouweiya.github.io/2017/02/13/%E7%94%A8WinSCP%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5Linux%E4%B8%BB%E6%9C%BA/"/>
    <id>https://aiyouweiya.github.io/2017/02/13/用WinSCP远程连接Linux主机/</id>
    <published>2017-02-12T16:00:00.000Z</published>
    <updated>2017-02-15T09:07:17.222Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是WinSCP"><a href="#什么是WinSCP" class="headerlink" title="什么是WinSCP"></a>什么是WinSCP</h2><p><code>WinSCP</code>是一个<code>Windows</code>环境下使用<code>ssh</code>的开源图形化<code>SFTP</code>客户端。同时支持<code>SCP</code>协议。它的主要功能就是在本地与远程计算机间安全的复制文件，提供图形化界面，操作起来十分简单方便。<a href="https://winscp.net/eng/index.php" target="_blank" rel="external">传送门</a></p>
<a id="more"></a>
<h2 id="使用密钥登陆远程主机"><a href="#使用密钥登陆远程主机" class="headerlink" title="使用密钥登陆远程主机"></a>使用密钥登陆远程主机</h2><p><code>WinSCP</code>默认使用密码登陆，这种方式当然，是不安全的，所以我们要设置成密钥登陆</p>
<p>点击<code>登陆</code>对话框的<code>高级</code>按钮，弹出<code>高级站点设置</code>对话框，<code>SSH--验证--密钥文件</code>，选中之前生成的密钥文件<code>id_rsa</code>即可，程序会自动转换为<code>ppk</code>格式。</p>
<p><img src="http://olb41wiaa.bkt.clouddn.com/miyao.png" width="100%"></p>
<p>做好上述配置后，退出链接，再次连接时会提示你输入密钥的密码。</p>
<h2 id="与远程主机保持连接"><a href="#与远程主机保持连接" class="headerlink" title="与远程主机保持连接"></a>与远程主机保持连接</h2><p>尽管这个软件使用起来特别方便，但是隔了几分钟没在上面操作，连接就会断开，我们可以通过小小的设置就可以解决这个问题，在登陆状态下菜单栏的<code>选项--选项--面板--远程</code>，勾选上<code>刷新远程面板间隔</code>即可。</p>
<h2 id="直接用root账户登陆"><a href="#直接用root账户登陆" class="headerlink" title="直接用root账户登陆"></a>直接用root账户登陆</h2><p>修改<code>/etc/ssh/sshd_config</code>，把<code>PermitRootLogin prohibit-password</code>改为<code>yes</code></p>
<p>修改<code>/etc/sudoers</code>，注释掉<code>ubuntu  ALL=(ALL:ALL) NOPASSWD: ALL</code>，并添加下面内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ubuntu ALL=NOPASSWD: ALL</div><div class="line">%sudo ALL=(ALL) NOPASSWD:ALL</div></pre></td></tr></table></figure>
<p>修改<code>WinSCP</code>设置，<code>高级--环境--SFTP</code>，修改<code>SFTP服务器</code>为<code>sudo  /usr/lib/openssh/sftp-server</code>，<code>保存</code>，之后登陆就不再需要切换到<code>su</code>下了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是WinSCP&quot;&gt;&lt;a href=&quot;#什么是WinSCP&quot; class=&quot;headerlink&quot; title=&quot;什么是WinSCP&quot;&gt;&lt;/a&gt;什么是WinSCP&lt;/h2&gt;&lt;p&gt;&lt;code&gt;WinSCP&lt;/code&gt;是一个&lt;code&gt;Windows&lt;/code&gt;环境下使用&lt;code&gt;ssh&lt;/code&gt;的开源图形化&lt;code&gt;SFTP&lt;/code&gt;客户端。同时支持&lt;code&gt;SCP&lt;/code&gt;协议。它的主要功能就是在本地与远程计算机间安全的复制文件，提供图形化界面，操作起来十分简单方便。&lt;a href=&quot;https://winscp.net/eng/index.php&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="腾讯云" scheme="https://aiyouweiya.github.io/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>SSH远程登录Linux主机方法及原理</title>
    <link href="https://aiyouweiya.github.io/2017/01/03/SSH%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95Linux%E4%B8%BB%E6%9C%BA%E6%96%B9%E6%B3%95%E5%8F%8A%E5%8E%9F%E7%90%86/"/>
    <id>https://aiyouweiya.github.io/2017/01/03/SSH远程登录Linux主机方法及原理/</id>
    <published>2017-01-02T16:00:00.000Z</published>
    <updated>2017-02-13T08:06:06.188Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是SSH"><a href="#什么是SSH" class="headerlink" title="什么是SSH"></a>什么是SSH</h2><p>Secure Shell（缩写为SSH），由IETF的网络工作小组（Network Working Group）所制定；SSH是一项建立在应用层和传输层基础上的安全协议，为计算机上的Shell（壳层）提供安全的传输和使用环境。SSH是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用SSH协议可以有效防止远程管理过程中的信息泄露问题。透过SSH可以对所有传输的数据进行加密，也能够防止DNS欺骗和IP欺骗,总之它能够为我们安全使用远程主机提供保障。</p>
<a id="more"></a>
<h2 id="怎样使用SSH登陆"><a href="#怎样使用SSH登陆" class="headerlink" title="怎样使用SSH登陆"></a>怎样使用SSH登陆</h2><p>在客户端来看，SSH提供两种级别的安全验证。</p>
<ul>
<li>第一种级别（基于密码的安全验证），知道帐号和密码，就可以登录到远程主机，本地主机用服务器的公钥对密码加密，然后将加密后的数据发送到服务器，服务器使用私钥解密，密码验证成功则允许登陆，否则不允许登陆。</li>
<li>第二种级别（基于密钥的安全验证），需要依靠密钥，也就是你必须为自己创建一对密钥，并把公有密钥放在需要访问的服务器上。客户端软件会向服务器发出请求，请求用你的密钥进行安全验证。服务器收到请求之后，先在你在该服务器的用户根目录下寻找你的公有密钥，然后把它和你发送过来的公有密钥进行比较。如果两个密钥一致，服务器就用公有密钥加密「质询」（challenge）并把它发送给客户端软件，客户端用私钥进行解密，然后将解密后的数据发送回服务器进行验证。</li>
</ul>
<h3 id="密码登录"><a href="#密码登录" class="headerlink" title="密码登录"></a>密码登录</h3><p>假设你是第一次登录远程主机，使用<code>$ ssh ubuntu@xxx.com</code>登录，你会得到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The authenticity of host &apos;123.206.198.83 (123.206.198.83)&apos; can&apos;t be established.</div><div class="line">ECDSA key fingerprint is SHA256:P0XOcgjXyTikxaGKzmWsALKUYZPqTftP0KTFoTJnFvs.</div><div class="line">Are you sure you want to continue connecting (yes/no)?</div></pre></td></tr></table></figure>
<p>意思是：我是你要登陆的远程主机，我的公钥的<code>SHA256</code>指纹是<code>P0XOcgjXyTikxaGKzmWsALKUYZPqTftP0KTFoTJnFvs</code>,你是否要继续连接，此时该主机的公钥指纹是不可信任的（中间人攻击），我们可以将其与远程主机的公钥进行对比（一般是公开的）例如<code>Github公钥</code><a href="https://help.github.com/articles/what-are-github-s-ssh-key-fingerprints/" target="_blank" rel="external">https://help.github.com/articles/what-are-github-s-ssh-key-fingerprints/</a> 如果一致的话就可以确认链接，不是的话就说明存在中间人攻击了。</p>
<p>当确认连接后，会提示输入密码<code>ubuntu@xxx.com&#39;s password:</code>，此时输入正确的密码即可成功登陆，显示如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Welcome to Ubuntu 16.04.1 LTS (GNU/Linux 4.4.0-53-generic x86_64)</div><div class="line"></div><div class="line"> * Documentation:  https://help.ubuntu.com</div><div class="line"> * Management:     https://landscape.canonical.com</div><div class="line"> * Support:        https://ubuntu.com/advantage</div><div class="line"></div><div class="line">Last login: Mon Feb 13 14:32:03 2017</div><div class="line">ubuntu@VM-37-129-ubuntu:~$</div></pre></td></tr></table></figure>
<h4 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h4><p>攻击者与通讯的两端分别建立独立的联系，并交换其所收到的数据，使通讯的两端认为他们正在通过一个私密的连接与对方直接对话，但事实上整个会话都被攻击者完全控制。下面这个例子解释了密码登陆的危险性。</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Man_in_the_middle_attack.svg/640px-Man_in_the_middle_attack.svg.png" alt="中间人攻击" width="100%"></p>
<p>假设爱丽丝（Alice）希望与鲍伯（Bob）通信。同时，马洛里（Mallory）希望拦截窃会话以进行窃听并可能在某些时候传送给鲍伯一个虚假的消息。</p>
<p>首先，爱丽丝会向鲍勃索取他的公钥。如果Bob将他的公钥发送给Alice，并且此时马洛里能够拦截到这个公钥，就可以实施中间人攻击。马洛里发送给爱丽丝一个伪造的消息，声称自己是鲍伯，并且附上了马洛里自己的公钥（而不是鲍伯的）。<br>爱丽丝收到公钥后相信这个公钥是鲍伯的，于是爱丽丝将她的消息用马洛里的公钥（爱丽丝以为是鲍伯的）加密，并将加密后的消息回给鲍伯。马洛里再次截获爱丽丝回给鲍伯的消息，并使用马洛里自己的私钥对消息进行解密，如果马洛里愿意，她也可以对消息进行修改，然后马洛里使用鲍伯原先发给爱丽丝的公钥对消息再次加密。当鲍伯收到新加密后的消息时，他会相信这是从爱丽丝那里发来的消息。<br>1.爱丽丝发送给鲍伯一条消息，卻被马洛里截获：</p>
<p>2.马洛里将这条截获的消息转送给鲍伯；此时鲍伯並無法分辨这条消息是否从真的爱丽丝那里发来的：</p>
<p>3.鲍伯回应爱丽丝的消息，并附上了他的公钥：</p>
<p>4.马洛里用自己的密钥替换了消息中鲍伯的密钥，并将消息转发给爱丽丝，声称这是鲍伯的公钥：</p>
<p>5.爱丽丝用她以为是鲍伯的公钥加密了她的消息，以为只有鲍伯才能读到它：</p>
<p>6.然而，由于这个消息实际上是用马洛里的密钥加密的，所以马洛里可以解密它，阅读它，并在愿意的时候修改它。他使用鲍伯的密钥重新加密，并将重新加密后的消息转发给鲍伯：</p>
<p>7.鲍勃认为，这条消息是经由安全的传输通道从爱丽丝那里传来的。<br>这个例子显示了爱丽丝和鲍伯需要某种方法来确定他们是真正拿到了属于对方的公钥，而不是拿到来自攻击者的公钥。</p>
<h3 id="密钥登陆"><a href="#密钥登陆" class="headerlink" title="密钥登陆"></a>密钥登陆</h3><h4 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h4><p>首先设置你的用户名密码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;Your Name&quot;</div><div class="line">$ git config --global user.email &quot;email@example.com&quot;</div></pre></td></tr></table></figure>
<p>然后生成密钥：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen</div><div class="line">Geberating public/private rsa key pair.</div><div class="line">Enter file in which to save the key (/c/Documents and Settings/Administrator/.ssh/id_rsa):（设置保存公钥和私钥的位置，保持默认，可以不填直接回车）</div><div class="line">Enter passphrase (empty for no passphrase): （读取id_rsa的密码，可不填，不过建议填写）</div><div class="line">Enter same passphrase again: （再次输入id_rsa密码确认）</div><div class="line">Your identification has been saved in /c/Documents and Settings/Administrator/.ssh/id_rsa.</div><div class="line">Your public key has been saved in /c/Documents and Settings/Administrator/.ssh/id_rsa.pub.</div><div class="line">The key fingerprint is:生成的KEY 你的email帐户</div></pre></td></tr></table></figure>
<p>完成以上就在<code>c/Documents and Settings/Administrator/.ssh/</code>生成了密钥对。</p>
<h4 id="上传公钥"><a href="#上传公钥" class="headerlink" title="上传公钥"></a>上传公钥</h4><p>接下来我们就要将公钥发送给服务器，这个过程需要你输入密码（在未登录的状态下执行以下命令）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp ~/.ssh/id_rsa.pub ubuntu@xxx.com:~</div></pre></td></tr></table></figure></p>
<p>输入密码后，公钥就被发送到服务器，但是还没完，我们还要将公钥添加到<code>authorized_keys</code>中，才能让服务器识别出本地的主机.（要在<code>root</code>权限下执行，不会自行百度）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /home/ubuntu</div><div class="line">cat id_rsa.pub &gt;&gt; .ssh/authorized_keys</div></pre></td></tr></table></figure></p>
<p>OK，该主机的公钥已经被服务器识别，当你再次<code>$ ssh ubuntu@xxx.com</code>时，你会得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Enter passphrase for key &apos;/c/Users/aiyouweiya/.ssh/id_rsa&apos;:（输入私钥的密码）</div></pre></td></tr></table></figure></p>
<p>完成以上操作，就可完成密钥登陆。</p>
<h2 id="禁用密码登录"><a href="#禁用密码登录" class="headerlink" title="禁用密码登录"></a>禁用密码登录</h2><p>中间人攻击让密码登录变得不安全，因此我们需要在服务器设置禁止密码登陆，进入<code>/etc/ssh</code>目录，编辑<code>sshd_config</code>文件，设置此选项<code>PasswordAuthentication no</code>,即不允许密码登录，之后还要重新启动<code>service restart sshd</code>。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>因为公钥加密比密码直接登录更安全，所以一般的服务器都会默认将<code>PasswordAuthentication</code>设置为<code>no</code>，即不允许密码登录。但是当你开启密码登录时，默认会先采用公钥登录，公钥登录不成功还是会采取密码登录。ps：本地密钥丢失也会直接采用密码登录。下面比较这两种登录方式的差异。</p>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center">密码登录</th>
<th style="text-align:center">公钥登录</th>
</tr>
</thead>
<tbody>
<tr>
<td>含义</td>
<td style="text-align:center">本地主机用远程主机的公钥对密码加密，远程主机私钥解密</td>
<td style="text-align:center">远程主机随机发送字符串到客户端，客户端用私钥加密，发送回远程主机，远程主机用公钥解密</td>
</tr>
<tr>
<td>安全性</td>
<td style="text-align:center">低，容易受到中间人攻击</td>
<td style="text-align:center">高，但是要确保本地秘钥的安全性</td>
</tr>
</tbody>
</table>
<p>本文都是在<code>Ubuntu Server 16.04.1 LTS 64位</code>下进行的操作，其他类型的<code>Linux</code>机子都大同小异，留待读者自行研究吧……</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是SSH&quot;&gt;&lt;a href=&quot;#什么是SSH&quot; class=&quot;headerlink&quot; title=&quot;什么是SSH&quot;&gt;&lt;/a&gt;什么是SSH&lt;/h2&gt;&lt;p&gt;Secure Shell（缩写为SSH），由IETF的网络工作小组（Network Working Group）所制定；SSH是一项建立在应用层和传输层基础上的安全协议，为计算机上的Shell（壳层）提供安全的传输和使用环境。SSH是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用SSH协议可以有效防止远程管理过程中的信息泄露问题。透过SSH可以对所有传输的数据进行加密，也能够防止DNS欺骗和IP欺骗,总之它能够为我们安全使用远程主机提供保障。&lt;/p&gt;
    
    </summary>
    
    
      <category term="腾讯云" scheme="https://aiyouweiya.github.io/tags/%E8%85%BE%E8%AE%AF%E4%BA%91/"/>
    
  </entry>
  
</feed>
